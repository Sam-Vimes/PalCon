@{
    @model string[]
    ViewBag.Title = "Home Page";
    Layout = null;
}

@*
    TODO
        save settings (but whose take priority?)
        detect disconnect
        shields
        prevent double-click fleet sends
        check colours valid
        break dep. between easeljs ship scale and collission detection
    WARNINGS
        tween using ticks, just in case easeljs being used for gameplay (e.g. ship scale)
*@

<html>
<head>
    <style>
        @@font-face {
            font-family: space;
            src: url("content/space_age.ttf") format("truetype");
        }

        * {
            outline-style: none;
        }

        h2 {
            font-family: space;
        }

        h3 {
            color: white;
            margin-top: 10px;
        }

        input {
            border-radius: 5px;
            width: 40px;
            padding: 2px 7px;
        }

        #pregame {
            width: 60%;
            float: left;
        }

        .clearfix:after {
            visibility: hidden;
            display: block;
            font-size: 0;
            content: " ";
            clear: both;
            height: 0;
        }

        #pregame label {
            /*width: 150px;*/
            /*display: inline-block;*/
            text-align: right;
        }

        button {
            border-radius: 5px;
            padding: 5px;
            font-weight: bold;
        }

            button:hover {
                cursor: pointer;
            }

        #instructions {
            border-radius: 5px;
            color: #bbb;
            background-color: black;
            font-size: .8em;
            padding: 5px;
            /*margin-right:-99%;
            width:100%;
            float:left;*/
        }

            #instructions label {
                display: block;
                margin-left: 0;
                text-align: left;
            }

            #instructions span {
                display: inline-block;
                margin-left: 12px;
            }

        .rows {
            width: auto;
            float: left;
            padding-right: 30px;
            margin-right: 5%;
        }

            .rows > div, .colours > div {
                margin-bottom: 5px;
                text-align: right;
                width: 100%;
                position: relative;
            }

        .colours {
            float: left;
        }

            .colours > div > div {
                /*float: left;*/
                width: 20px;
                /*margin-right: 10px;*/
                padding: 5px;
                margin-bottom: 5px;
                border: 3px solid;
                border-radius: 15px;
                position: relative;
                background-color: black;
                float: left;
                margin-right: 30%;
            }

                .colours > div > div:hover {
                    cursor: pointer;
                }

            .colours input {
                width: 13px;
                height: 13px;
                margin: auto;
                display: block;
            }

        #rightcontainer {
            float: left;
            padding: 0 5px;
            margin-right: -99%;
        }

            #rightcontainer > div {
                margin-top: 5px;
            }

        #controls {
            display: none;
            float: left;
            padding: 5px;
            width: 100%;
        }

            #controls button {
                font-size: .85em;
                padding: 4px;
            }

        #chat_scroller {
            background-color: black;
            border-radius: 5px;
            padding: 5px;
            display: none;
            overflow-y: scroll;
        }

        #chat_input {
            width: auto;
            display: none;
        }

        body {
            overflow: hidden;
        }

        input[type=text] {
            background-color: #99ccbb;
            border-top-color: #aec;
            border-left-color: #aec;
            border-bottom-color: #9cb;
            border-right-color: #9cb;
        }
    </style>
    <script src="/Scripts/jquery-1.10.2.min.js"></script>
    <script src="/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <script src="/signalr/hubs"></script>
    <script src="~/Scripts/howler.js"></script>

    <script src="https://code.createjs.com/createjs-2015.11.26.min.js"></script>




    <script>
        var logLevel = 2;


        // SIGNALR
        var myHub;
        var test;
        var keys = [];
        var keyconst = {};
        var const_surrender = 's';

        keyconst.ctrl = [17, 16, 224]; // 91 behaves odd in win/chrome
        keyconst.z = [90];
        keyconst.x = [88];
        keyconst.enter = [13];
        $(function () {
            myHub = $.connection.palconHub;

            myHub.client.playerJoined = function (newNumPlayers) {
                playSound(sound_land, 0, 0.5, .3);
                numPlayers = newNumPlayers;
                $("#playersLabel").html(numPlayers);

            }

            myHub.client.receiveChat = function (col, msg) {

                var html = "<div style='color:" + col + "'>"
                + msg + "</div>";
                $("#chat_scroller").append(html);
                $("#chat_scroller").animate({ scrollTop: $("#chat_scroller").height() }, "slow");
            }

            myHub.client.joinSuccess = function (aGameId) {
                gameId = aGameId;
                $("button").css('visibility', 'visible');
                showSettings();
                initChat();
                $(".colours input").on("change", function () {
                    console.log('picked');
                    myHub.server.sendColour(gameId, $("input[name='colour']:checked").val());
                });
            }

            myHub.client.checkReadyToStart = function () {
                console.log('server asking ready to start');
                myHub.server.clientReadyToStart(gameId).done(function () {
                    console.log('told server ready to start');
                });
                init();
            }

            myHub.client.receiveMap = function (myPlayerId, json, colours) {
                console.log(colours);
                ownerIndex = myPlayerId;
                ownercolours = JSON.parse(colours);
                $("body").css("background-color", ownercolours[ownerIndex]);

                //console.log(json);

                var map = JSON.parse(json);

                // INIT GAME

                processGameBoard(map);
                setTimeout(startTicker, 500);
                setupDragBoxEvents();

            }

            myHub.client.receiveCommands = function (json) {

                var obj = JSON.parse(json);
                //incomingCommands = obj.commands;
                if (obj.turnId == turnId + 1) {
                    incomingCommands = obj.commands;
                    turnId++;
                }
                else if (obj.turnId > turnId + 1) {
                    //alert('You seem to be out of sync with the rest of the players.  You can continue playing, but unexpected results might occur');

                    console.log('commands received in wrong order? ' + obj.turnId + ' ' + turnId);
                    backlogIncomingCommands[obj.turnId] = obj.commands;
                    turnId++; // seems like a whole set gets skipped for all players? - so just move on to next turn
                }
                else {
                    incomingCommands = obj.commands;
                    console.log('commands received in wrong order - shouldnt be possible');
                }

                doTick(); // if in background, ensure commands get processed soonish?
                //handleIncoming(incomingCommands);
            }

            myHub.client.receiveSettings = function (jsonstr) {
                console.log('received settings');
                var settings = JSON.parse(jsonstr);
                fleetspeed = settings.speed;
                growthrate = settings.growth;
                numPlanetsDesired = settings.ppp;
                neutralPlanetCost = settings.costs;
                attackRatio = settings.attack;
                showSettings();
                test = settings;
            }

            $.connection.hub.start().done(function () {
                myHub.server.joinGame();

                $(".colours > div > div").on("click", function () {
                    $(this).find("input").select();
                    $(this).find("input").prop('checked', true);
                });



                $(window).keydown(
                    function (e) {
                        keys[e.which] = true;

                        if (e.which == keyconst.x[0]) {
                            cancelRecurringOrders();
                        }
                        if (e.which == keyconst.z[0]) {
                            e.preventDefault();
                        }
                    }
                );
                $(window).keyup(
                    function (e) {
                        keys[e.which] = false;
                        if (e.which == keyconst.z) {
                            e.preventDefault();
                        }
                        if (e.which == keyconst.enter) {
                            sendChat();
                        }
                    }
                );

            });

            var context;
            try {
                // Fix up for prefixing
                window.AudioContext = window.AudioContext || window.webkitAudioContext;
                context = new AudioContext();
            }
            catch (e) {
                alert('Web Audio API is not supported in this browser');
            }
            sound_conquer = new Howl({
                //src: ['/content/nff-timpani-low.wav'],
                src: ['/content/nff-bass-thud.wav']
            });
            sound_warning = new Howl({
                src: ['/content/nff-pick.wav'],
                volume: .2
            });
            sound_attack = new Howl({
                src: ['/content/nff-laser.wav']
            });
            sound_land = new Howl({
                src: ['/content/blop.mp3']
            });


            //var sound_conquer = new Howl({
            //    src: ['/content/nff-timpani-low.wav'],
            //    volume: 0.5
            //});
            //sound_conquer.play();
            //sound_conquer.stereo(0);

        });

        function initChat() {
            $("#chat_input").show();
            $("#chat_scroller").show();
            $("#chat_input").on("keyup", function (evt) {

            });
        }

        function sendChat() {
            myHub.server.sendChat(gameId, $("#chat_input").val());
            $("#chat_input").val('');
        }

        function isPressed(which) {
            for (code in which) {
                if (keys[which[code]])
                    return true;
            }
        }

        function sendSettings() {
            var settings = {};
            settings.speed = $("#fleetspeed").val();
            settings.growth = $("#growthrate").val();
            settings.ppp = $("#ppp").val();
            settings.costs = $("#costs").val();
            settings.attack = $("#attack").val();
            myHub.server.sendSettings(gameId, JSON.stringify(settings));

        }

        function showSettings() {
            $("#fleetspeed").val(fleetspeed);
            $("#growthrate").val(growthrate);
            $("#ppp").val(numPlanetsDesired);
            $("#costs").val(neutralPlanetCost);
            $("#attack").val(attackRatio);
        }

        function sendQueue(json) {
            myHub.server.sendCommands(gameId, JSON.stringify(json));
        }

        function startGame() {
            sendSettings(); // somebody could have joined since last settings change.
            myHub.server.tryStartGame(gameId)
            .done(function (result) {
                numPlayers = result;
                if (numPlayers > 0) {
                    console.log('server says numplayers: ' + numPlayers);

                    while (numPlayers < 3) {
                        aiPlayersHostedLocally.push(new AI(numPlayers + 1));
                        numPlayers++;
                    }

                    var json = JSON.stringify(generateGameBoard());
                    myHub.server.sendMap(gameId, json, aiPlayersHostedLocally.length);

                }
            });

        }

        function newGame() {
            window.location.reload();
        }

        function sendSurrender() {
            queuedCommands.push(
                        {
                            owner: ownerIndex,
                            type: const_surrender
                        }
                       );
        }
        function playerSurrendered(oid) {
            if (oid == ownerIndex) {
                clearHighlights();
                // TODO: clear percent bars
            }
            var f;
            var todelete = [];
            for (var i in fleets) {
                f = fleets[i];
                if (f.owner == oid)
                    todelete.push(f);
            }
            for (var i in todelete) {
                f = todelete[i];
                showExplosion(f.shape.x, f.shape.y, f.size, oid, 2, true);
                var idx = jQuery.inArray(f, fleets);
                fleets.splice(idx, 1);
                layers.paths.removeChild(f.path);
                layers.fleets.removeChild(f.shape);
            }
            var p;
            for (var i in planets) {
                p = planets[i];
                if (p.owner == oid) {
                    p.owner = 0;
                    redrawPlanet(p);
                    //showOrderStart(p.x, p.y, p.radius, oid);
                    showExplosion(p.x, p.y, p.radius * 3, oid, 3, true);
                }
            }
        }

        // CONFIGURABLE SETTINGS

        var ticksPerTurn = 10;
        var msPerTurn = 500;
        var growthrate = 100;
        var fleetspeed = 100;
        var neutralPlanetCost = 50;
        var attackRatio = .8;

        var planetradiuspercent = 1.9;
        var planetRadiusPixels = 0;

        var numPlanetsDesired = 30;
        var numPlayers = 0;
        var gameId;

        // UI
        var highlights = [];

        var highlightedPlanets = [];



        var sendPercentBars = [];
        var sendDestPlanet;
        var sendPercent;
        var sendPercentDelta;
        var sendInProgress;

        var layers = {};


        var sound_conquer;
        var sound_attack;
        var sound_warning;

        var isDragging;
        var dragBox;
        var dragStartPlanet;
        var dragEndPlanet;

        function clearHighlights() {
            var p;
            for (var idx in highlightedPlanets) {
                p = highlightedPlanets[idx];
                layers.planets.removeChild(p.highlight);
                p.highlight = null;
            }
            highlightedPlanets = [];
        }

        function highlightPlanet(planet) {
            planet.highlight = highlightShape(planet);
            layers.planets.addChild(planet.highlight);

            highlightedPlanets.push(planet);
        }
        function setupDragBoxEvents() {
            stage.addEventListener("pressmove", function (evt) {

                var isRight = (evt.nativeEvent.button == 2);
                if (isRight)
                    return;
                if (!isDragging) {
                    isDragging = true;
                    if (!isPressed(keyconst.ctrl)) {
                        clearHighlights();
                    }
                    dragBox = new createjs.Shape();
                    dragBox.x = evt.stageX / stage.scaleX;
                    dragBox.y = evt.stageY / stage.scaleX;
                    var col = "#ffffff";
                    dragBox.graphics.setStrokeStyle(2 * globalscale, 'square', 'miter', 0, true);
                    dragBox.graphics.beginStroke(col);
                    dragBox.alpha = .4;
                    dragBox.graphics.drawRect(0, 0, 1, 1);
                    layers.paths.addChild(dragBox);
                }
                dragBox.scaleX = evt.stageX / stage.scaleX - dragBox.x;
                dragBox.scaleY = evt.stageY / stage.scaleX - dragBox.y;

                //stage.update(); //much smoother because it refreshes the screen every pixel movement instead of the FPS set on the Ticker
            });

            stage.addEventListener("stagemouseup", stagePressUp);
        }

        function stagePressUp(evt) {

            var isRight = (evt.nativeEvent.button == 2);
            if (isRight)
                return;
            if (isDragging) {

                isDragging = false;

                layers.paths.removeChild(dragBox);
                var p;
                var x1 = Math.min(dragBox.x, dragBox.x + dragBox.scaleX);
                var x2 = Math.max(dragBox.x, dragBox.x + dragBox.scaleX);
                var y1 = Math.min(dragBox.y, dragBox.y + dragBox.scaleY);
                var y2 = Math.max(dragBox.y, dragBox.y + dragBox.scaleY);
                for (var idx in planets) {
                    p = planets[idx];
                    if (p.owner == ownerIndex && p.highlight == null) {
                        var distFromStartSquared = Math.pow(p.x - dragBox.x, 2) + Math.pow(p.y - dragBox.y, 2);
                        if (distFromStartSquared < p.radius * p.radius) {
                            highlightPlanet(p);
                        }
                        else if (p.x > x1 && p.x < x2) {
                            if (p.y > y1 && p.y < y2) {
                                highlightPlanet(p);
                            }
                        }
                    }


                }
            }
            stage.update(); //much smoother because it refreshes the screen every pixel movement instead of the FPS set on the Ticker
            evt.bubbles = true;

            return true;
        }

        function startSendPercentBar(destPlanet) {
            if (!highlightedPlanets.length)
                return;
            sendDestPlanet = destPlanet;
            sendPercentDelta = 4;
            sendPercent = 0;
            var highlightedPlanet;
            for (var idx in highlightedPlanets) {
                var sendPercentBar = new createjs.Shape();
                layers.planets.addChild(sendPercentBar);

                highlightedPlanet = highlightedPlanets[idx];
                sendPercentBar.graphics.setStrokeStyle(7 * globalscale, 'square', 'miter', 0, true);
                //sendPercentBar.graphics.setStrokeDash([1, 10*globalscale], 0);
                sendPercentBar.alpha = .6;
                var col = ownercolours[ownerIndex];
                if (isPressed(keyconst.z)) {
                    col = "#fff";
                }
                sendPercentBar.graphics.beginStroke(col);

                drawSurfacePath(highlightedPlanet, destPlanet, sendPercentBar);

                sendPercentBar.scaleX = sendPercentBar.scaleY = 0;

                layers.planets.addChild(sendPercentBar);
                sendPercentBars.push(sendPercentBar);
            }
            sendInProgress = true;
        }

        function cancelSend() {
            for (var idx in sendPercentBars) {
                layers.planets.removeChild(sendPercentBars[idx]);
            }
            sendPercentBars = [];
            sendInProgress = false;

        }

        function tryCreateCommand(fromPlanet, toPlanet, sendPercent, owner) {
            //if (fromPlanet.index == 1)
            //        console.log('sending from 1 ' + sendPercent);
            if (toPlanet != fromPlanet) {
                var pop = Math.round(fromPlanet.pop / 100 * sendPercent);

                if (pop >= 1) {
                    queuedCommands.push(
                        {
                            owner: owner,
                            pop: pop,
                            from: fromPlanet.index,
                            to: toPlanet.index
                        }
                       );
                    showOrderStart(fromPlanet.x, fromPlanet.y, fromPlanet.radius, owner);
                }
            }
            else {
                console.log('tried to send to same planet');
            }
        }

        function doSend() {
            //stage.removeChild(sendPercentBar);
            var planet = sendDestPlanet;
            if (sendPercent > 95)
                sendPercent = 105; // clearly they want to just send everyone
            if (sendPercent < 10)
                sendPercent = 10;
            for (var idx in highlightedPlanets) {
                var highlightedPlanet = highlightedPlanets[idx];
                tryCreateCommand(highlightedPlanet, planet, sendPercent, ownerIndex);

                if (isPressed(keyconst.z)) {
                    console.log('creating recurring order');
                    recurringOrders.push(new RecurringOrder(highlightedPlanet, planet, sendPercent));
                }
            }
            cancelSend();
        }

        function updateSendProgress() {
            sendPercent += sendPercentDelta;
            if (sendPercent > 100 || sendPercent < 0) {
                sendPercent = sendPercent - sendPercentDelta;
                sendPercentDelta = 0 - sendPercentDelta;
            }
            var sendPercentBar;
            for (var idx in sendPercentBars) {
                sendPercentBar = sendPercentBars[idx];
                sendPercentBar.scaleX = sendPercentBar.scaleY = sendPercent / 100;
            }
            if (sendPercent > 90) {

            }
            //stage.update();
        }

        // ENTITIES

        function RecurringOrder(from, to, percent) {
            this.lastExec = turnId;
            this.intervalTurns = 30;
            this.from = from;
            this.to = to;
            this.percent = percent;
            //this.amount = amount;
            this.shape = recurringPath(this);
            layers.paths.addChild(this.shape);
        }

        function Planet(growth, x, y, pop, owner) {
            this.index = planets.length;
            this.x = x;
            this.y = y;

            this.pop = pop;
            this.owner = owner;
            this.growth = growth;
            this.radius = Math.sqrt(growth) * planetRadiusPixels;   // pixels
            this.shape = planetShape(this.radius, x, y, owner);
            this.fillupContainer = new createjs.Container();
            this.label = planetLabel(this);
            this.fullpop = growth * 100;
            this.highlight = null;
            //layers.planets.addChild(this.shape);
            //layers.planets.addChild(this.label);
            var planet = this;
            drawPlanet(planet);
            var clickable = planetClickableShape(this);
            stage.addChild(clickable);

            clickable.addEventListener("click", function (evt) {

                var isRight = (evt.nativeEvent.button == 2);
                if (isRight) {
                    if (sendInProgress)
                        doSend();
                }
            });

            clickable.addEventListener("mouseout", function (evt) {
                if (sendInProgress)
                    cancelSend();
            });


            clickable.addEventListener("mousedown", function (evt) {

                var isRight = (evt.nativeEvent.button == 2);
                if (isRight) {
                    if (sendInProgress) {
                        // something went wrong. prev send failed to cancel on mouseup.
                        cancelSend();
                    }
                    if (highlightedPlanets.length && (highlightedPlanets.length > 1 || planet.highlight == null)) {
                        startSendPercentBar(planet);
                    }
                }
                else {
                    if (planet.owner == ownerIndex) {
                        if (!isPressed(keyconst.ctrl)) {
                            clearHighlights();

                        }
                        if (planet.highlight == null) {
                            highlightPlanet(planet);
                        }
                        else {
                            layers.planets.removeChild(planet.highlight);
                            planet.highlight = null;
                            highlightedPlanets.splice(jQuery.inArray(planet, highlightedPlanets), 1);
                        }
                    }

                }
            });

        }

        function Fleet(pop, startPlanet, destination, owner) {
            this.distToGo = 9999;
            this.pop = pop;
            this.owner = owner;
            this.destination = destination;
            var xdist = destination.shape.x - startPlanet.shape.x;
            var ydist = destination.shape.y - startPlanet.shape.y;
            var angle = Math.atan(ydist / xdist);
            if (xdist < 0) {
                angle = angle - Math.PI;
                //this.dx = 0 - this.dx;
                //this.dy = 0 - this.dy;
            }
            this.dx = globalscale * Math.cos(angle) * fleetspeed / 10 / ticksPerTurn;
            this.dy = globalscale * Math.sin(angle) * fleetspeed / 10 / ticksPerTurn;

            this.shape = fleetShape(Math.sqrt(pop), startPlanet.shape.x, startPlanet.shape.y, owner, angle);
            this.distMidToFront = this.shape.scaleX * 1.5;
            this.path = fleetPath(startPlanet, destination, owner);
            this.size = Math.sqrt(pop);
            this.popLandPerTurn = Math.round(this.pop / 10) + 1;
            this.ticksToNextLanding = null;
            layers.fleets.addChild(this.shape);
            layers.paths.addChild(this.path);
            //stage.setChildIndex(this.shape, 3);
            //layers.planets.setChildIndex(this.path, 1);

            this.redrawScale = function () {
                this.size = Math.sqrt(pop);
                var tween = createjs.Tween.get(this.shape, { useTicks: true });
                var scaleTo = globalscale * Math.sqrt(this.pop) * .7 + 1.5;
                tween.to({ scaleX: scaleTo, scaleY: scaleTo }, ticksPerTurn);
                //this.shape.scaleX = this.shape.scaleY = globalscale * Math.sqrt(this.pop) * .7 + 1.5;
            }
            this.redrawScale();
        }


        // COMMS WITH SERVER
        var recurringOrders = [];
        var queuedCommands = [];
        var incomingCommands = null;
        var backlogIncomingCommands = [];
        function handleIncoming(commands) {
            var c;
            for (idx in commands) {
                c = commands[idx];
                if (c.type == const_surrender) {
                    playerSurrendered(c.owner);
                }
                else {
                    // default command: send fleet
                    var fromPlanet = planets[c.from];
                    var toPlanet = planets[c.to];
                    var pop = c.pop;
                    if (pop > fromPlanet.pop)
                        pop = Math.round(fromPlanet.pop - .5);
                    if (pop > 0 && fromPlanet.owner == c.owner) {
                        var f = new Fleet(pop, fromPlanet, toPlanet, c.owner);
                        fleets.push(f);
                        fromPlanet.pop -= pop;

                        if (toPlanet.owner == ownerIndex && fromPlanet.owner != ownerIndex) {

                            var rate = 1.7 - Math.sqrt(pop) / 10;
                            if (rate < .7)
                                rate = .7;
                            var volume = Math.sqrt(pop + 10) / 20 - .15;
                            if (volume > .5)
                                volume = .5;
                            playSound(sound_warning, fromPlanet.x, rate, volume);
                        }
                    }
                    else {
                        console.log('no pop? or planet changed hands since command sent?');
                    }
                }
            }
            incomingCommands = null;

            if (backlogIncomingCommands[turnId + 1]) {
                incomingCommands = backlogIncomingCommands[turnId + 1];
                turnId++;
            }


        }

        // GAME TIMING AND MECHANICS


        var tickInTurn = 0;
        var timeStartTurn = 0;
        var turnId = 0;

        var planets = [];
        var fleets = [];
        var distanceMatrix = []; // for AI's
        var distanceMatrixSumInverts = [];
        var stage;
        var globalscale;
        var xbound, ybound;
        var ownercolours = ['#dddddd', '#ffd400', '#ff6688', '#00eeee', '#50f050', '#8899ff', '#ff00ff', '#aacc00', '#ffffff'];

        var ownerIndex = null;

        function newScaledShape() {
            var shape = new createjs.Shape();
            shape.scaleX = globalscale;
            shape.scaleY = globalscale;
            return shape;
        }

        function planetLabel(planet) {
            var col = ownercolours[planet.owner];
            var txt = new createjs.Text("_", "bold 14px arial", col);
            txt.scaleX = globalscale;
            txt.scaleY = globalscale;
            txt.shadow = new createjs.Shadow("#000000", 0, 0, 3);
            return txt;
        }



        function planetShape(size, x, y, owner) {

            var shape = new createjs.Container();
            var strokeWidth = 2 * globalscale;
            var isize = size - strokeWidth;
            var col = ownercolours[owner];
            var circle = new createjs.Shape();
            shape.addChild(circle);
            circle.graphics.setStrokeStyle(strokeWidth);
            circle.graphics.beginStroke(col);
            circle.graphics.beginRadialGradientFill([ownercolours[owner], "#000"], [0, 1],
            0, 0, isize,
             isize * .3 + globalscale, isize * .3 + globalscale, isize * 1.2).drawCircle(0, 0, isize);
            circle.x = 0;
            circle.y = 0;
            var plain = new createjs.Shape();
            plain.graphics.beginFill(col).drawCircle(0, 0, isize - strokeWidth + .5 * globalscale);
            plain.alpha = .1;
            var circle2 = new createjs.Shape();
            var size2 = isize - strokeWidth + .5 * globalscale;
            circle2.alpha = .3;
            circle2.graphics.beginRadialGradientFill([ownercolours[owner], "#000"], [0, 1],
            0, 0, size2,
             size2 * .4 + globalscale, size2 * .4 + globalscale, size2 * 1.1).drawCircle(0, 0, size2);
            //circle2.graphics.beginFill(col).drawCircle(0, 0, isize - strokeWidth+.5*globalscale);

            shape.addChild(circle2);
            shape.addChild(plain);
            shape.x = x;
            shape.y = y;

            //circle.graphics.beginRadialGradientFill(["#000", ownercolours[owner], "#fff"], [0, 1,2], size/2, size/2, 0, size, size, size).drawCircle(size/2,size/2,size*.7);
            //circle.graphics.beginRadialGradientFill(["#000", ownercolours[owner]], [0, 1], size *.3, size *.3, size*.7, size/2, size/2, size*.8).drawCircle(size *.4, size *.4, size * .6);
            //            circle.graphics.beginRadialGradientFill(["#0f0", "#000"], [0, 1], 0-isize*.4, 0-isize*.4, isize, isize*.4, isize*.4,isize*1.4).drawCircle(0,0,size);


            return shape;
        }

        function planetFillup(planet) {
            var container = new createjs.Container();
            var col = ownercolours[planet.owner];
            var shape = new createjs.Shape();
            var line = new createjs.Shape();
            //shape.scaleX = shape.scaleY = 1;
            var size = planet.radius - 2 * globalscale
            var y = size * (1 - Math.min(2, (planet.pop * 2 / planet.fullpop))) + globalscale;
            shape.graphics.beginLinearGradientFill(["transparent", col, col, "transparent"], [0, .01, .2, .6], 0, y - 1 * globalscale, 0, y + size * 2);
            //shape.graphics.beginFill(ownercolours[planet.owner]);
            shape.graphics.drawCircle(0, 0, planet.radius - 1 * globalscale);
            shape.graphics.endFill();
            if (y > 0 - size) {
                line.graphics.setStrokeStyle(1, 'butt', 'round', 0);
                line.graphics.beginStroke(col)
                line.graphics.moveTo(0 - Math.sqrt(size * size - y * y), y);
                line.graphics.lineTo(Math.sqrt(size * size - y * y), y);
            }
            container.x = planet.x;
            container.y = planet.y;
            shape.alpha = .5;
            container.addChild(shape);
            container.addChild(line);
            return container;
        }

        function planetClickableShape(planet) {
            var circle = new createjs.Shape();
            //circle.graphics.setStrokeStyle(3 * globalscale);
            circle.graphics.beginFill(ownercolours[planet.owner])
            .drawCircle(0, 0, planet.radius + 5);
            circle.alpha = .01;
            circle.x = planet.x;
            circle.y = planet.y;
            return circle;
        }

        function highlightShape(planet) {

            var col = [ownercolours[ownerIndex]];
            var circle = new createjs.Shape();
            var width = 11 * globalscale;
            circle.graphics.setStrokeStyle(width);
            circle.graphics.beginRadialGradientStroke(["transparent", "#fff", col, "transparent"], [0, .2, .3, 1],
                0, 0, planet.radius,
             0, 0, planet.radius + 11 * globalscale)
            //circle.graphics.beginStroke("#FFF")
            .drawCircle(0, 0, planet.radius + 5 * globalscale);
            //circle.graphics.setStrokeStyle(1.5 * globalscale);
            //circle.graphics.beginStroke("#fff").drawCircle(0, 0, planet.radius + width/2);
            circle.alpha = .66;
            circle.x = planet.x;
            circle.y = planet.y;
            return circle;
        }

        function fleetShape(size, x, y, owner, angle) {
            var col = ownercolours[owner];
            var container = new createjs.Container();
            var shape = new createjs.Shape();
            var shapeNoShadow = new createjs.Shape();
            container.addChild(shape);
            container.addChild(shapeNoShadow);




            //shape.graphics.setStrokeStyle(1 + .1 * scale * globalscale, 'butt', 'round', 0, true);
            //shape.graphics.beginStroke(col);
            shape.graphics.beginFill(col);

            shape.graphics.moveTo(1, 2);
            shape.graphics.lineTo(-.7, .3);
            shape.graphics.lineTo(-.5, 0);

            shape.graphics.lineTo(1, .5);
            shape.graphics.lineTo(2.5, 0);
            shape.graphics.lineTo(2.7, .3);
            shape.graphics.lineTo(1, 2);

            shape.graphics.endStroke();
            shape.graphics.endFill();
            shape.graphics.beginRadialGradientFill([col, "#000"], [0, 1],
            -5, 0, 7, -5.5, 0, 4).drawEllipse(0, 0, 2, 3);

            shape.shadow = new createjs.Shadow("#000000", 3 + size * globalscale / 10, 3 + size * globalscale / 10, globalscale * (10 + size));

            shapeNoShadow.graphics.beginLinearGradientFill([col, "#fff"], [1, 0], -1, 2.5, 1.5, 2.5)
            //shape.graphics.beginRadialGradientFill(["#000","#000", col,"#fff"], [0,.4,.8, 1],
            //1, 2.2, 2,
            // 1.3, 2.5, .02).drawEllipse(.4, 1.5, 1.2, 1.7);
            .drawEllipse(.4, 1.2, 1.2, 1.2);
            //.drawEllipse(-10, -10, 20, 40);




            //shape.graphics.beginLinearGradientFill([col,col, "#ffffff",col, "#000000"], [0,.3,.3,.45, 1], 4, -1, -2, 3);
            //shape.graphics.moveTo(0, 1);
            //shape.graphics.lineTo(0, 3);
            //shape.graphics.lineTo(-2, 0);
            //shape.graphics.lineTo(0, 1);

            //shape.graphics.beginLinearGradientFill([col,col, "#ffffff", col, "#000000"], [0, 0,0, .35, 1], 2.5, .5, -3, 2);
            //shape.graphics.moveTo(0, 1);
            //shape.graphics.lineTo(0, 3);
            //shape.graphics.lineTo(2, 0);
            //shape.graphics.lineTo(0, 1);

            //shape.graphics.beginLinearGradientFill([col,col, "#ffffff", col, "#000000"], [0, .1,.1, .25, 1], 3, 0, -2, 0);
            //shape.graphics.moveTo(0, 1);
            //shape.graphics.lineTo(2, 0);
            //shape.graphics.lineTo(-2, 0);
            //shape.graphics.lineTo(0, 1);

            //shape.graphics.endFill();
            //shape.graphics.setStrokeStyle(1 + .01 * scale, 'butt', 'round', 0, true);
            //shape.graphics.beginStroke(col);
            //shape.graphics.moveTo(2, 0);
            //shape.graphics.lineTo(0, 3);
            //shape.graphics.lineTo(-2, 0);
            //shape.graphics.lineTo(2, 0).lineTo(0, 3);


            container.regX = 1;
            container.regY = 1.5;
            container.x = x;
            container.y = y;
            container.rotation = angle * 180 / Math.PI - 90;
            if (container.rotation < 0)
                container.rotation += 360;
            //shape.rotation += 0 - 90 - angle * 180/ Math.PI;
            return container;
        }

        function drawSurfacePath(planet1, planet2, shape) {
            var x = planet1.x;
            var y = planet1.y;
            var xd = (planet2.x - x);
            var yd = (planet2.y - y);
            var dist = Math.sqrt(xd * xd + yd * yd);
            var startRadProportion = planet1.radius / dist;
            var startCuttoffX = xd * startRadProportion;
            var startCuttoffY = yd * startRadProportion;
            x = x + startCuttoffX;
            y = y + startCuttoffY;
            var endRadProportion = planet2.radius / dist;
            xd = xd - xd * endRadProportion - startCuttoffX;
            yd = yd - yd * endRadProportion - startCuttoffY;
            shape.graphics.moveTo(0, 0);
            shape.graphics.lineTo(xd, yd);
            shape.x = x;
            shape.y = y;

        }

        function recurringPath(recurring) {
            var shape = new createjs.Shape();
            shape.alpha = .4;
            width = (2 + recurring.percent * .04) * globalscale;
            shape.graphics.setStrokeStyle(width, 0, 0, 0, true);
            //shape.graphics.setStrokeDash([2 * globalscale, 2 * globalscale], 0);
            shape.graphics.beginStroke("#ffffff");

            drawSurfacePath(recurring.from, recurring.to, shape);
            return shape;

        }

        function fleetPath(p1, p2, owner, width) {
            if (!width)
                width = 3 * globalscale;
            var shape = new createjs.Shape();
            shape.graphics.setStrokeStyle(width, 0, 0, 0, true);
            shape.graphics.setStrokeDash([2 * globalscale, 2 * globalscale], 0);
            shape.graphics.beginStroke(ownercolours[owner]);
            drawSurfacePath(p1, p2, shape);
            //shape.graphics.moveTo(0, 0);
            //shape.graphics.lineTo(x2 - x1, y2 - y1);
            shape.alpha = .4;
            //shape.x = x1;
            //shape.y = y1;
            return shape;
        }

        function bg() {
            var bg = new createjs.Shape();
            //bg.scaleX = 1;
            //bg.scaleY = 1;
            bg.graphics.beginFill("#000000").drawRect(0, 0, xbound, ybound);
            bg.x = 0;
            bg.y = 0;
            return bg;
        }

        function processGameBoard(planetArray) {
            for (idx in planetArray) {
                var j = planetArray[idx];
                var p = new Planet(j.growth, j.x * globalscale * 10, j.y * globalscale * 10, j.pop, j.owner);
                planets.push(p);
            }
            distanceMatrix = [];
            distanceMatrixSumInverts = [];
            var j;
            for (idx in planets) {
                var p = planets[idx];
                var arr = [];
                var sumInverted = 0;
                for (j in planets) {

                    if (idx != j) {
                        var p2 = planets[j];
                        var distCentres = Math.sqrt(Math.pow(p.shape.x - p2.shape.x, 2) + Math.pow(p.shape.y - p2.shape.y, 2));
                        var distance = distCentres - p2.radius;
                        //var distPercent = (distCentres - p.shape.radius) * 100 / xbound;

                        arr.push({ planetId: p2.index, dist: distance });
                        sumInverted += 1 / distance;

                    }
                }
                arr = arr.sort(function (a, b) {
                    return a.dist < b.dist ? -1 : 1;
                });
                arr = arr.slice(0, 8);
                distanceMatrix.push(arr);
                distanceMatrixSumInverts.push(sumInverted);
            }

        }


        function generateGameBoard(isRetry) {
            function overlap(obj, minDist) {
                var gap = minDist;
                if (!minDist)
                    gap = 1;
                var p;
                var distCentresSquared;
                var distFilledUpSquared;
                for (idx in planetArray) {
                    p = planetArray[idx];
                    distCentresSquared = Math.pow(obj.x - p.x, 2) + Math.pow(obj.y - p.y, 2);
                    distFilledUpSquared = Math.pow(p.radius + obj.radius + gap, 2);
                    if (distCentresSquared < distFilledUpSquared)
                        return true;
                    //if (p.x - p.radius - gap < obj.x + obj.radius && p.x + p.radius + gap > obj.x - obj.radius) {
                    //    if (p.y - p.radius - gap < obj.y + obj.radius && p.y + p.radius + gap > obj.y - obj.radius) {
                    //        return true;
                    //    }
                    //}
                }
                return false;
            }

            planetArray = [];
            var newPlanet;
            var minDistBetweenPlayers = xbound / (numPlayers + 1);

            for (i = 1; i <= numPlayers; i++) {
                var growth = 4;
                var canadd = false;
                var tries = 0;
                while (!canadd) {
                    var radius = Math.sqrt(growth) * planetradiuspercent;
                    newPlanet =
                    {
                        owner: i,
                        x: Math.random() * (100 - radius * 2) + radius,
                        y: Math.random() * (100 / xbound * ybound - radius * 2) + radius,
                        pop: 100,
                        growth: growth,
                        radius: radius
                    };
                    canadd = !overlap(newPlanet, minDistBetweenPlayers);
                    if (!canadd) {
                        
                    }
                    tries++;
                    if (tries > 10) {
                        minDistBetweenPlayers = minDistBetweenPlayers * .98;
                    }
                    if (tries > 100) {
                        if (isRetry) {
                            alert('can\'t find a place to add new planet.  too many planets');
                            return;
                        }
                        else {
                            return generateGameBoard(true);
                        }
                    }
                }
                planetArray.push(newPlanet);
            }
            var growth = 4;
            var extraCost = 50;
            var numNeutrals = 10 + (numPlayers + 1) * (numPlanetsDesired / 6) + 1;
            if (numNeutrals > 100)
                numNeutrals = 100;

            for (i = 0; i < numNeutrals; i++) {
                if (i == 1) {
                    growth = 1;
                    extraCost = 0;
                }
                if (i * 2 >= numNeutrals)
                    growth = 2;
                var canadd = false;
                var tries = 0;
                while (!canadd) {
                    var radius = Math.sqrt(growth) * planetradiuspercent;
                    newPlanet =
                    {
                        owner: 0,
                        x: Math.random() * (100 - radius * 2) + radius,
                        y: Math.random() * (100 / xbound * ybound - radius * 2) + radius,
                        pop: growth * neutralPlanetCost / 5 + Math.random() * growth * neutralPlanetCost / 5 + extraCost,
                        growth: growth,
                        radius: radius
                    };
                    canadd = !overlap(newPlanet);
                    if (!canadd) {

                    }
                    tries++;
                    if (tries > 100) {
                        if (isRetry) {
                            return planetArray;
                        }
                        else {
                            return generateGameBoard(true);
                        }
                    }
                }
                planetArray.push(newPlanet);
            }

            return planetArray;

        }

        function init() {
            $("#rightcontainer h3").hide();
            createjs.Touch.enable(stage, false, true);

            $("#pregame").hide();

            document.getElementById("PalCanvas").addEventListener('contextmenu', function (e) {
                if (e.button === 2) {
                    e.preventDefault();
                    return false;
                }
            }, false);
            document.getElementById("PalCanvas").setAttribute('width', window.innerHeight * 1.5);
            document.getElementById("PalCanvas").setAttribute('height', window.innerHeight);
            var swidth = document.getElementById("PalCanvas").width;
            var sheight = document.getElementById("PalCanvas").height;
            globalscale = 1;
            planetRadiusPixels = planetradiuspercent * globalscale * 10;



            //var planetsData = generateGameBoard();




            // code here.
            stage = new createjs.Stage("PalCanvas");
            stage.enableMouseOver(10);
            stage.update();

            stage.scaleX = stage.scaleY = swidth / 1000;
            ybound = 1000 * sheight / swidth;
            xbound = 1000;
            stage.addChild(bg());
            layers.planets = new createjs.Container();
            layers.paths = new createjs.Container();
            stage.addChild(layers.paths);
            stage.addChild(layers.planets);
            layers.fleets = new createjs.Container();
            stage.addChild(layers.fleets);

            // must be after setting globalscale and initing stage:
            //processGameBoard(planetsData);

            //var p = new Planet(1, 50, 50, 101.3, 0);
            //planets.push(p);
            //p = new Planet(2, 600, 140, 5, 1);
            //planets.push(p);
            //p = new Planet(4, 510, 210, 50, 0);
            //planets.push(p);

            //var f = new Fleet(15, planets[2], planets[1], 0);
            //fleets.push(f);

            //f = new Fleet(3, planets[1], planets[0], 1);
            //fleets.push(f);
            //f = new Fleet(80, planets[1], planets[2], 1);
            //fleets.push(f);

            playSound(sound_warning, xbound / 2, .5, .4);
        }

        function startTicker() {
            $("body").css('background-color', '#333');
            createjs.Ticker.setFPS(ticksPerTurn / msPerTurn * 1000);
            createjs.Ticker.addEventListener("tick", handleTick);
            timeStartTurn = new Date().getTime();
            myHub.server.sendCommands(gameId, '[]');
            $("#controls").slideDown(500);
            var p = planets[ownerIndex - 1];
            if (p.owner == ownerIndex) {
                showOrderStart(p.x, p.y, 100, ownerIndex)
            }
        }

        function updatePlanet(p) {

            if (p.owner > 0) {
                if (p.pop < p.fullpop) {
                    p.pop += p.growth * growthrate / ticksPerTurn / 500;
                }

            }
            var isOverpopulated = p.pop > p.fullpop - 1; // 1 wiggle room for rounding because using test to check
            //var isOverpopulated = p.pop > p.fullpop - 1;
            var newText = Math.round(p.pop);

            if (newText != p.label.text) {
                if (isOverpopulated)
                    p.label.color = "#bbb"
                else
                    p.label.color = ownercolours[p.owner];
                p.label.text = newText;

                p.label.x = p.x - globalscale * p.label.getBounds().width / 2;
                p.label.y = p.y - globalscale * p.label.getBounds().height / 2;

                p.fillupContainer.removeChild(p.fillup);
                p.fillup = planetFillup(p);
                p.fillupContainer.addChild(p.fillup);
            }


        }

        function moveFleet(f, idx) {
            if (f != null) {
                f.distToGo = Math.sqrt(Math.pow((f.shape.x - f.destination.shape.x), 2) + Math.pow((f.shape.y - f.destination.shape.y), 2))
                 - f.destination.radius * globalscale
                 - f.distMidToFront * f.shape.scaleX;

                if (f.distToGo < 0) {
                    //f.arrived = true;

                    if (f.ticksToNextLanding > 0) {
                        f.ticksToNextLanding--;
                    }
                    else {
                        land(f);
                        f.ticksToNextLanding = ticksPerTurn;
                    }

                    //fleets[idx] = null;


                }
                else {

                    f.shape.x += f.dx;
                    f.shape.y += f.dy;

                    //createjs.Tween.get(f.shape)
                    //.to({ x: f.shape.x + f.dx, y: f.shape.y + f.dy }, msPerTurn / ticksPerTurn);
                }
            }
        }

        function showOrderStart(x, y, radius, owner) {
            var circle = new createjs.Shape();
            circle.graphics.setStrokeStyle(8 * globalscale);
            circle.graphics.beginStroke(ownercolours[owner]).drawCircle(0, 0, radius - 3);
            circle.x = x;
            circle.y = y;
            circle.scaleX = globalscale;
            circle.scaleY = globalscale;
            circle.alpha = .7;
            layers.planets.addChild(circle);
            createjs.Tween.get(circle)
                    .to({ scaleX: 0, scaleY: 0 }, msPerTurn * 2);
            //                    .to({ scaleX: 1, scaleY: 1, alpha: 0 }, msPerTurn * 2, createjs.Ease.quintOut);

        }

        function showExplosion(x, y, size, owner, timeScale, noBrightPatch) {
            if (!timeScale)
                timeScale = 1;
            var circle = new createjs.Shape();
            circle.graphics.setStrokeStyle(10 * globalscale);
            circle.graphics.beginFill(ownercolours[owner]).drawCircle(0, 0, 5 + size * 2);
            circle.x = x;
            circle.y = y;
            circle.scaleX = .1;
            circle.scaleY = .1;
            circle.alpha = 1;
            layers.fleets.addChild(circle);

            var tween = createjs.Tween.get(circle);
            if (!noBrightPatch) {
                tween.to({ scaleX: .3, scaleY: .3 }, msPerTurn * .15 * timeScale);
            }
            tween.to({ scaleX: 1, scaleY: 1, alpha: 0 }, msPerTurn * 2 * timeScale, createjs.Ease.quintOut);
        }

        function playSound(sound, x, rate, volume) {

            var pan = 0;
            if (xbound) {
                pan = x / xbound * 2 - 1;
            }
            if (!rate)
                rate = 1;
            if (!volume)
                volume = 1;
            sound._volume = volume;
            sound._stereo = pan;
            sound._rate = rate;
            var s = sound.play();
            sound.stereo(pan, s);
            sound.rate(rate, s);
            sound.volume(volume, s);
        }

        function redrawPlanet(p) {
            layers.planets.removeChild(p.shape);
            layers.planets.removeChild(p.label);
            p.fillupContainer.removeChild(p.fillup);
            drawPlanet(p);
        }

        function drawPlanet(p) {
            p.shape = planetShape(p.radius, p.x, p.y, p.owner);
            p.label = planetLabel(p);
            p.fillup = planetFillup(p);
            layers.planets.addChild(p.shape);
            p.fillupContainer.addChild(p.fillup);
            layers.planets.addChild(p.fillupContainer);
            layers.planets.addChild(p.label);
        }

        function land(f) {

            var deleteFleet;

            var p = f.destination;

            var landPop = Math.min(f.popLandPerTurn, f.pop);

            //sound calcs


            var volume = Math.sqrt(landPop + 10) / 10 - .3;
            if (volume > 1)
                volume = 1;
            var spotx = f.shape.x + Math.cos(Math.atan(f.dy / f.dx)) * Math.sign(f.dx) * f.distMidToFront * f.shape.scaleX;
            var spoty = f.shape.y + Math.sin(Math.atan(f.dy / f.dx)) * Math.sign(f.dx) * f.distMidToFront * f.shape.scaleX;

            if (f.owner != f.destination.owner) {
                // ATTACK
                for (var a in aiPlayersHostedLocally) {
                    aiPlayersHostedLocally[a].processFleetAttack(f);
                }

                var rate = 3 - 10 * landPop / (f.destination.pop + 10);
                if (rate < .5)
                    rate = .5;
                if (rate > 3)
                    rate = 3;

                showExplosion(spotx, spoty, f.shape.scaleX, f.owner, 1);

                var damage = landPop * attackRatio;


                if (f.destination.pop >= damage) {

                    playSound(sound_attack, p.x, rate / 2 + .25, volume * .35);



                    f.destination.pop -= damage;
                    f.pop -= landPop;
                    f.redrawScale();

                    if (f.pop <= 0) {
                        deleteFleet = true;
                        layers.fleets.removeChild(f.shape);
                    }
                }
                else {



                    // CAPTURE PLANET AND TRANSFER REMAINING SHIPS
                    fleetLoss = f.destination.pop / attackRatio;
                    f.destination.pop = f.pop - fleetLoss;

                    showExplosion(p.x, p.y, p.radius * 3, p.owner, 2, true);
                    var ex = p.x;
                    var ey = p.y;
                    var er = p.radius * 3;
                    var fowner = f.owner;
                    setTimeout(function () {
                        showExplosion(ex, ey, er, fowner, 2, true);
                    }, 200);
                    for (var idx in highlightedPlanets) {
                        if (highlightedPlanets[idx] == p) {
                            highlightedPlanets.splice(idx, 1);
                            //highlightedPlanet = null;
                            layers.planets.removeChild(p.highlight);
                            p.highlight = null;
                        }
                    }
                    p.owner = f.owner;
                    redrawPlanet(p);

                    playSound(sound_conquer, p.x, 2 - p.growth * .25, .06);
                    deleteFleet = true;
                    layers.fleets.removeChild(f.shape);
                }

            }
            else {
                var rate = 3 - 10 * landPop / (f.destination.pop + 10);
                if (rate < .5)
                    rate = .5;
                playSound(sound_land, p.x, rate, volume);
                showExplosion(spotx, spoty, f.shape.scaleX, f.owner, 1);
                f.destination.pop += landPop;
                f.pop -= landPop
                f.redrawScale();

                if (!f.landing) {
                    f.landing = true;
                    var tween = createjs.Tween.get(f.shape);
                    //targetx = (f.shape.x * 2 + f.destination.x) / 3;
                    //targety = (f.shape.y * 2 + f.destination.y) / 3;

                    ////showExplosion(targetx, targety, f.shape.scaleX, f.owner);
                    if (f.shape.rotation + Math.random() * 100 - 50 < 180)
                        rotate = 270 + Math.random() * 50 - 25;
                    else
                        rotate = 90 + Math.random() * 50 - 25;
                    if (rotate - f.shape.rotation > 360)
                        rotate -= 360;
                    if (rotate - f.shape.rotation < -360)
                        rotate += 360;
                    //var moreRotate = rotate + (rotate - f.shape.rotation) / 2;
                    tween.to({ rotation: rotate }, msPerTurn * 2, createjs.Ease.cubicInOut)
                    //.to({ rotation: moreRotate, scaleX: f.shape.scaleX / 5.5, scaleY: f.shape.scaleY / 4, x: targetx, y: targety + f.size / 3 + 2 }, msPerTurn * 2, createjs.Ease.cubicInOut);

                    //setTimeout(function () {
                    //    layers.fleets.removeChild(f.shape);
                    //}, msPerTurn * 4)
                }

                if (f.pop <= 0) {

                    deleteFleet = true;
                    layers.fleets.removeChild(f.shape);
                }

            }


            if (deleteFleet) {
                var idx = jQuery.inArray(f, fleets);
                fleets.splice(idx, 1);
            }
            layers.paths.removeChild(f.path);
        }

        function processRecurringOrders() {
            for (var idx in recurringOrders) {
                // not perfect, but good enough:
                var o = recurringOrders[idx];
                if (o.from.owner != ownerIndex)
                    cancelRecurringOrder(o);
            }
            for (var idx in recurringOrders) {
                var o = recurringOrders[idx];

                if (o.lastExec + o.intervalTurns <= turnId) {
                    tryCreateCommand(o.from, o.to, o.percent, ownerIndex);
                    o.lastExec = turnId;

                }
            }
        }

        function cancelRecurringOrder(o) {
            layers.paths.removeChild(o.shape);
            recurringOrders.splice(jQuery.inArray(o, recurringOrders), 1);
        }

        function cancelRecurringOrders() {


            for (var pi in highlightedPlanets) {

                var p = highlightedPlanets[pi];
                for (var idx = 0; idx < recurringOrders.length; idx++) {
                    var o = recurringOrders[idx];

                    if (o.from == p) {
                        cancelRecurringOrder(o);
                        idx--;
                    }
                }
            }

            //recurringOrders = [];
        }

        function doTick() {
            var a;
            var f;
            var p;
            tickInTurn++;
            if (tickInTurn == 2) {
                for (a in aiPlayersHostedLocally) {
                    aiPlayersHostedLocally[a].doTurn1();
                }
            }
            if (tickInTurn == 3) {
                for (a in aiPlayersHostedLocally) {
                    aiPlayersHostedLocally[a].doTurn2();
                }
            }
            if (tickInTurn == 4) {
                for (a in aiPlayersHostedLocally) {
                    aiPlayersHostedLocally[a].doTurn3();
                }
            }
            if (tickInTurn == 5) {
                for (a in aiPlayersHostedLocally) {
                    aiPlayersHostedLocally[a].doTurnFinal();
                }
            }
            if (tickInTurn >= ticksPerTurn) {
                // todo
                if (incomingCommands != null) {
                    // sneak in recurring orders just before sending:
                    processRecurringOrders();



                    tickInTurn = 0;
                    timeStartTurn = new Date().getTime();

                    sendQueue(queuedCommands);
                    queuedCommands = [];
                    handleIncoming(incomingCommands);


                }
                else if (tickInTurn == ticksPerTurn + 10) {
                    // still waiting. pause.
                    console.log('pausing....');
                }


            }
            else {
                for (f in fleets) {
                    moveFleet(fleets[f], f);
                }
                for (p in planets) {
                    updatePlanet(planets[p]);
                }

                var expectedTime = timeStartTurn + tickInTurn * msPerTurn / ticksPerTurn;
                var actualTime = new Date().getTime();
                var lag = actualTime - expectedTime;
                if (lag > 50) {
                    console.log('lagging by ' + lag + ' ms - catch up');
                    doTick();
                }

            }

        }

        function handleTick(event) {
            // Actions carried out each tick (aka frame)
            if (!event.paused) {
                // Actions carried out when the Ticker is not paused.

                doTick();
                if (sendInProgress)
                    updateSendProgress(); // do this regardless of game lag
                stage.update();
            }
        }


        // ======================= AI ==============================

        var aiPlayersHostedLocally = [];
        function AI(ownerId) {
            this.ownerId = ownerId;
            this.planetData = [];
            this.persistentPlanetData = Array.apply(null, Array(99));
            for (var idx in this.persistentPlanetData)
                this.persistentPlanetData[idx] = { lastSent: -4 };
            this.enmity = Array.apply(null, Array(numPlayers + 3)).map(Number.prototype.valueOf, 1);
            function PlanetData(planet) {
                this.planet = planet;
                this.planetId = planet.index;
                this.owner = planet.owner;
                this.overpop = 0;
                this.actualDefence = planet.pop;
                this.actualAttack = 0;
                this.needsHelp = 0;
                this.influence = Array.apply(null, Array(numPlayers + 3)).map(Number.prototype.valueOf, 0);
                this.influenceAddedThisStep = Array.apply(null, Array(numPlayers + 3)).map(Number.prototype.valueOf, 0);
                this.influence[this.owner] = planet.pop;
                this.desirability = planet.growth;
                this.aiInfluence = 0;
                this.planetInfluence = 0;
                this.otherInfluence = 0;
                this.goodTarget = 0;
                this.goodRallyPoint = 0;
            }

            this.processFleetAttack = function (f) {
                if (f.destination.owner == this.ownerId)
                    this.enmity[f.owner] += (f.pop + 10) / (f.destination.pop + 10);
                else if (f.destination.owner > 0)
                    this.enmity[f.owner] -= (f.pop + 10) / (f.destination.pop + 10) / 2;
            }

            this.doInfluenceStep = function (multiplier) {
                if (!multiplier)
                    multiplier = 50;
                var matrix;
                var p;
                var otherInfluence = 0;
                var spareInfluence = 0;
                var thisPlanetMultiplier;
                var i;
                var j;
                for (var idx in planets) {
                    p = this.planetData[idx];
                    if (p.owner > 0) {
                        otherInfluence = 0;
                        matrix = distanceMatrix[idx];
                        //if (matrix.planetId != idx) alert('error ' + idx);
                        for (i in p.influence) {
                            if (i > 0 && i != p.owner)
                                otherInfluence += p.influence[i];
                        }
                        spareInfluence = p.influence[p.owner] - otherInfluence;
                        thisPlanetMultiplier = multiplier / distanceMatrixSumInverts[idx] / 100;
                        if (spareInfluence > 0) {
                            for (j in matrix) {
                                toPlanetData = this.planetData[matrix[j].planetId];
                                amt = spareInfluence * thisPlanetMultiplier / (matrix[j].dist + 30);
                                toPlanetData.influenceAddedThisStep[p.owner] += amt;
                                p.influenceAddedThisStep[p.owner] -= amt *.8; // NB CREATES MORE INFLUENCE THAN POP
                            }
                        }

                    }
                }

                for (var idx in planets) {
                    p = this.planetData[idx];
                    for (i in p.influenceAddedThisStep) {
                        p.influence[i] += p.influenceAddedThisStep[i];
                        p.influenceAddedThisStep[i] = 0;
                    }
                }

                for (var idx in this.enmity)
                {
                    this.enmity[idx] = this.enmity[idx] * .995;
                }
            }

            this.calcFinalInfluenceByType = function () {
                var i;
                var j;
                for (var idx in planets) {
                    p = this.planetData[idx];
                    p.aiInfluence = 0;
                    p.planetInfluence = 0;
                    p.otherInfluence = 0;
                    for (i in p.influence) {
                        if (i == p.owner) {
                            p.planetInfluence += p.influence[i];
                        }
                        if (i == this.ownerId)
                            p.aiInfluence += p.influence[i];
                        if (i != p.owner && i != this.ownerId)
                            p.otherInfluence += p.influence[i];
                    }
                    if (p.owner == this.ownerId) {
                        p.needsHelp =
                            Math.max(p.actualAttack / p.actualDefence,
                            p.otherInfluence / p.planetInfluence)
                            * p.desirability;

                        if (p.otherInfluence / p.planetInfluence > 5)
                            p.needsHelp = 0;

                        p.overpop = ( p.planet.pop + 10) / (p.needsHelp + .05);
                        if (p.planet.pop > p.planet.fullpop)
                            p.overpop = p.overpop * 2;
                            
                    }
                    else {
                        if (p.owner != this.ownerId) {
                            if (p.actualAttack < p.actualDefence) {
                                if (p.actualAtack > 0) {

                                }
                                p.goodTarget = Math.min(p.aiInfluence / (p.planetInfluence + p.otherInfluence), 2);
                                
                                if (p.goodTarget > .5) {
                                    p.goodTarget = p.goodTarget * (1 + p.desirability);
                                    if (this.enmity[p.owner] > 1)
                                        p.goodTarget = p.goodTarget * (1 + this.enmity[p.owner] / 5);
                                }
                                if (p.goodTarget > 0) {
                                    for (j in distanceMatrix[p.planetId]) {
                                        dmd = distanceMatrix[p.planetId][j];
                                        if (this.planetData[dmd.planetId].owner == this.ownerId) {
                                            this.planetData[dmd.planetId].goodRallyPoint += p.goodTarget * 100 / dmd.dist;
                                        }
                                        else {
                                            this.planetData[dmd.planetId].goodTarget += p.goodTarget * 50 / dmd.dist; // if not owned and would be good rally point, might be good target
                                        }
                                    }
                                }
                            }
                            p.goodTarget *= (1 + .5 * Math.random());
                        }
                        
                    }
                    

                }

            }

            this.checkAndSend = function(fromId, to, percent)
            {
                //if (fromId == 1)
                //    console.log('sending from 1 ' + percent);
                if (this.persistentPlanetData[fromId].lastSent >= turnId - 4)
                    return;
                tryCreateCommand(planets[fromId], planets[to], percent, this.ownerId);
                //if (fromId > 50)
                //    console.log('trying to send from ' + fromId);
                //console.log(fromId);
                this.persistentPlanetData[fromId].lastSent = turnId;
            }

            this.doTurn1 = function () {
                // own planets:  other-influence(danger) vs  self-influence(safety)
                // other planets:  danger vs greed vs self-influence
                // send ships to:   short term other>self; long term self>=other
                this.planetData = [];
                for (var idx in planets) {

                    this.planetData.push(new PlanetData(planets[idx]));
                }
                for (var idx in fleets) {
                    f = fleets[idx];
                    p = this.planetData[f.destination.index];
                    
                    mult = 100 / (Math.max(50, f.distToGo) + 50);
                    if (f.owner == p.owner) {
                        
                        p.actualDefence += f.pop * mult;
                    }
                    else
                    {
                        mult = mult * .8;
                        p.actualAttack += f.pop * mult;
                    }
                    p.influence[f.owner] += f.pop * mult;

                }

                this.doInfluenceStep(40);


            };

            this.doTurn2 = function () {
                this.doInfluenceStep(60);
            };

            this.doTurn3 = function () {
                this.doInfluenceStep(70);
            };

            this.doTurnFinal = function () {
                this.calcFinalInfluenceByType();

                var bestTargets = this.planetData.concat().sort(function (a, b) { return  a.goodTarget > b.goodTarget ? -1 : 1 });
                var bestRallies = this.planetData.concat().sort(function (a, b) { return  a.goodRallyPoint > b.goodRallyPoint ? -1 : 1 });
                var mostNeed = this.planetData.concat().sort(function (a, b) { return a.needsHelp > b.needsHelp ? -1 : 1 });
                var overpops = this.planetData.concat().sort(function (a, b) { return a.overpop > b.overpop ? -1 : 1 });
                var need = mostNeed[0];

                if (need.needsHelp > .8) {


                    for (var idx in distanceMatrix[need.planetId]) {
                        var dp = distanceMatrix[need.planetId][idx].planetId;
                        
                        if (planets[dp].owner == this.ownerId) {


                            if (this.persistentPlanetData[dp].lastSent <= turnId - 5) {

                                if ((this.planetData[dp].needsHelp < .8) && this.planetData[dp].planet.pop > need.planet.pop/5) {

                                    var percent = Math.min(100 * (need.needsHelp - .6) * need.planet.pop / planets[dp].pop, 80);
                                    if (percent * planets[dp].pop > need.needsHelp * .1 * need.planet.pop) {
                                        this.checkAndSend(dp, need.planetId, percent);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

                var overpop = overpops[0];
                if (this.persistentPlanetData[overpop.planetId].lastSent <= turnId - 19) {
                    //console.log('can send from most-overpop');
                    if (overpop.overpop > 200) {
                        //console.log('overpop:')
                        //console.log(overpop);
                        for (var idx in distanceMatrix[overpop.planetId]) {

                            var dp = distanceMatrix[overpop.planetId][idx].planetId;
                            if (planets[dp].owner == this.ownerId) {
                                //console.log('overpop recipient? ');
                                //console.log(this.planetData[dp]);
                                if (
                                    this.planetData[dp].goodRallyPoint > 10 ||
                                    this.planetData[dp].overpop < overpop.overpop * .5 * Math.random()) {
                                    this.checkAndSend(overpop.planetId, dp, 50);
                                    break;

                                }
                            }
                        }
                    }
                }
                for (var r in [0, 1]) {
                    var rally = bestRallies[r];
                    for (var idx in distanceMatrix[rally.planetId]) {
                        var dp = distanceMatrix[rally.planetId][idx].planetId;
                        if (planets[dp].owner == this.ownerId) {
                            if (this.persistentPlanetData[dp].lastSent <= turnId - 13) {
                                if (this.planetData[dp].needsHelp <= 0 && planets[dp].pop > 10) {

                                    this.checkAndSend(dp, rally.planetId, 50);
                                    break;
                                }
                            }
                        }
                    }
                }
                var target = bestTargets[0];
                for (var idx in distanceMatrix[target.planetId]) {

                    var dp = distanceMatrix[target.planetId][idx].planetId;
                    if (planets[dp].owner == this.ownerId) {
                        if (this.persistentPlanetData[dp].lastSent <= turnId - 9) {
                            
                            if ((this.planetData[dp].needsHelp <= .5) && (planets[dp].pop > 10) && this.planetData[dp].planet.pop >= target.planetInfluence/2) {
                                this.checkAndSend(dp, target.planetId, 60);
                                break;
                            }
                        }
                    }
                }

                if (this.ownerId == 2 && logLevel >= 2) {
                    //console.log(this.planetData);
                    //console.log(bestTargets);
                    //console.log(bestRallies);

                }
            };

        }
    </script>

</head>
<body onload="" style="margin:0; background-color:#224422">
    <canvas id="PalCanvas" width="1" height="1" style="float:left;"></canvas>
    <div id="pregame" class="clearfix" style="color:white; padding:10px">
        <h2>PalCon</h2>
        Waiting for players. Joined: <span id="playersLabel"></span>
        <br /><br />
        Suggestion: Before starting, hit <b>F11</b> to go fullscreen</span>
        <br /><br />
        <button id="btnStart" style="visibility:hidden" onclick="startGame();">START GAME</button>
        <hr />
        <div class="rows">
            <h3>Change game settings</h3>
            <div>
                <label>Fleet Speed: </label>
                <input type="text" id="fleetspeed" />
            </div>
            <div>
                <label>Growth Rate:</label>
                <input type="text" id="growthrate" />
            </div>
            <div>
                <label># Planets (3 player):</label>
                <input type="text" id="ppp" />
            </div>
            <div>
                <label>Neutral Planet Cost:</label>
                <input type="text" id="costs" />
            </div>
            <div>
                <label>Attack ratio:</label>
                <input type="text" id="attack" />
            </div>
            <div>
                <button style="visibility:hidden" id="btnSettings" onclick="sendSettings();">UPDATE SETTINGS</button>
            </div>
        </div>
        <div class="colours">
            <h3>Choose your preferred colour</h3>
            <div>
                @foreach (var colour in Model.Skip(1))
            {
                    <div style="border-color:@(colour)">
                        <input value="@(colour)" type="radio" name="colour" />
                    </div>
                }
            </div>
        </div>

    </div>
    <div id="rightcontainer">
        <h3>Instructions</h3>
        <div id="instructions">

            <div>
                <label>Select planets:</label><span>click / ctrl-click</span>
                <br />
                <label>Send fleet:</label><span>hold right-click</span>
            </div>
            <div>
                <label>Send repeat-order:</label><span>hold <b>Z</b> + right-click</span>
                <br />
                <label>Cancel repeat-orders:</label><span>select planet(s), then <b>X</b></span>

            </div>


        </div>
        <div id="controls" class="clearfix">
            <button id="newgame" onclick="newGame()">Restart</button>
            <button id="surrender" onclick="sendSurrender()">Surrender</button>
        </div>
        <div id="chat_scroller" style="height:50%">
        </div>
        <input type="text" id="chat_input" placeholder="CHAT...." />


    </div>
</body>
</html>



<!--function init() {
  var stage = new createjs.Stage("demoCanvas");
  var circle = new createjs.Shape();
  circle.graphics.beginFill("Crimson").drawCircle(0, 0, 50);
  circle.x = 100;
  circle.y = 100;
  stage.addChild(circle);
  createjs.Tween.get(circle, {loop: true})
    .to({x: 400}, 1000, createjs.Ease.getPowInOut(4))
    .to({alpha: 0, y: 75}, 500, createjs.Ease.getPowInOut(2))
    .to({alpha: 0, y: 125}, 100)
    .to({alpha: 1, y: 100}, 500, createjs.Ease.getPowInOut(2))
    .to({x: 100}, 800, createjs.Ease.getPowInOut(2));
  createjs.Ticker.setFPS(60);
  createjs.Ticker.addEventListener("tick", stage);
}-->
